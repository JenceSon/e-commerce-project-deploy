'use client';

import React, { useEffect, useState } from 'react';
import { Form, Input, Select, Button, Typography, Divider, Space, Row, Col, App, message } from 'antd';
import { useRouter } from 'next/navigation';
import { useAppSelector } from '@/hooks/redux_hooks';
import { useAppRouter } from '@/hooks/router_hook';
import { T } from '@/app/common';

const { Option } = Select;
const { Title, Paragraph } = Typography;

export default function PaymentPage() {
  const client = T.client;
  const [form] = Form.useForm();
  const [checkoutData, setCheckoutData] = useState(null);
  const [loading, setLoading] = useState(false);
  const router = useAppRouter();
  const user = useAppSelector('systemState', 'userReducer').user;
  const paymentMethod = Form.useWatch('paymentMethod', form);

  useEffect(() => {
    const storedData = localStorage.getItem('checkoutData');
    if (storedData) {
      setCheckoutData(JSON.parse(storedData));
    }
    // console.log('Checkout Data:', JSON.parse(storedData));
  }, []);

  const handleSubmit = async (values) => {
    if (loading) return;
    setLoading(true);
    // console.log('Checkout Data:', checkoutData);
    try {
      // Map payment method to backend enum
      const paymentMethodMap = {
        'tra_truoc': 'CREDIT_CARD',
        'tra_sau': 'CASH_ON_DELIVERY'
      };

      const orderData = {
        ...values,
        userId: user.id,
        paymentMethod: paymentMethodMap[values.paymentMethod],
        data: checkoutData.data.map(item => ({
          brand: item.brand || '',
          description: item.description || '',
          image: item.image || '',
          initialPrice: item.initialPrice?.toString() || '0',
          key: item.id || '',
          price: item.price?.toString() || '0',
          productName: item.name || '',
          quantity: item.quantity?.toString() || '0'
        })),
        discount: checkoutData.discount || 0,
        subtotal: checkoutData.subtotal || 0,
        total: checkoutData.total || 0
      };
      // console.log('Order Data:', orderData);
      const response = await client.post('/orders', orderData);

      localStorage.removeItem('checkoutData');
      openSuccessNotification();

      // Redirect based on payment method
      if (values.paymentMethod === 'tra_truoc') {
        // Store order ID for the payment page
        localStorage.setItem('pendingOrderId', response.id);
        router.push('payment/online-method', { id: response.id });
      } else {
        router.push('/order');
      }
    } catch (error) {
      message.error({
        content: 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i!',
      });
      console.error('Error creating order:', error);
    } finally {
      setLoading(false);
    }
  };
  const openSuccessNotification = () => {
    message.success({
      content: paymentMethod === 'tra_truoc'
        ? 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ti·∫øn h√†nh thanh to√°n!'
        : 'ƒê∆°n h√†ng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω!',
    });
  }; if (!user) {
    router.push('/login');
    return null;
  }

  if (!checkoutData) {
    return (
      <App>
        <div>Loading...</div>
      </App>
    );
  }

  return (
    <App>
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Title level={2}>Th√¥ng tin thanh to√°n</Title>

        <Row gutter={32} align="start">
          <Col xs={24} md={10} lg={6}>
            <div style={{ marginBottom: 24 }}>
              <Title level={4}>T√≥m t·∫Øt ƒë∆°n h√†ng</Title>
              <p>T·∫°m t√≠nh: {new Intl.NumberFormat('vi-VN').format(checkoutData.subtotal)} ‚Ç´</p>
              <p>Gi·∫£m gi√°: {new Intl.NumberFormat('vi-VN').format(checkoutData.discount)} ‚Ç´</p>
              <p><strong>T·ªïng c·ªông: {new Intl.NumberFormat('vi-VN').format(checkoutData.total)} ‚Ç´</strong></p>
            </div>
          </Col>

          <Col xs={24} md={14} lg={18}>
            <Form form={form} layout="vertical" onFinish={handleSubmit}>
              <Form.Item
                label="T√™n t√†i kho·∫£n"
                name="username"
                initialValue={user?.username}
              >
                <Input disabled />
              </Form.Item>            <Form.Item
                label="Email"
                name="email"
                initialValue={user?.email || 'ecommerce@gmail.com'}
              >
                <Input disabled />
              </Form.Item>

              <Form.Item
                label="H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n"
                name="receiverName"
                initialValue={user?.name}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!' }]}
              >
                <Input placeholder="Nh·∫≠p h·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n" />
              </Form.Item>

              <Row gutter={16}>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n"
                    name="receiverPhone"
                    initialValue={user?.phoneNumber}
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' },
                      { pattern: /^[0-9]{9,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!' }
                    ]}
                  >
                    <Input placeholder="S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n" />
                  </Form.Item>
                </Col>

                <Col xs={24} md={12}>
                  <Form.Item
                    label="S·ªë ƒëi·ªán tho·∫°i d·ª± ph√≤ng"
                    name="backupPhone"
                    rules={[
                      { pattern: /^[0-9]{9,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!' }
                    ]}
                  >
                    <Input placeholder="S·ªë ƒëi·ªán tho·∫°i d·ª± ph√≤ng" />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="ƒê·ªãa ch·ªâ nh·∫≠n"
                name="address"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}
              >
                <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng" />
              </Form.Item>

              <Form.Item
                label="Ph∆∞∆°ng th·ª©c thanh to√°n"
                name="paymentMethod"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!' }]}
              >
                <Select placeholder="Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n">
                  <Option value="tra_truoc">Thanh to√°n online</Option>
                  <Option value="tra_sau">Thanh to√°n khi nh·∫≠n h√†ng</Option>
                </Select>
              </Form.Item>

              {paymentMethod === 'tra_truoc' && (
                <Paragraph type="secondary" style={{ marginBottom: 24 }}>
                  üí≥ Sau khi x√°c nh·∫≠n, b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn Thanh to√°n online qua c·ªïng thanh to√°n ƒë·ªÉ ho√†n t·∫•t vi·ªác mua h√†ng m·ªôt c√°ch an to√†n.
                </Paragraph>
              )}            <Form.Item>
                <Button type="primary" htmlType="submit" loading={loading}>
                  X√°c nh·∫≠n thanh to√°n
                </Button>
              </Form.Item>
            </Form>
          </Col>      </Row>
      </Space>
    </App>
  );
}
